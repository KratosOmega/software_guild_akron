<?xml version="1.0" encoding="windows-1252"?>
<!-- #1 - Make security the default namespace -->
<beans:beans xmlns="http://www.springframework.org/schema/security" 
       xmlns:beans="http://www.springframework.org/schema/beans" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.springframework.org/schema/security 
http://www.springframework.org/schema/security/spring-security-3.1.xsd">
    <!-- #2 - Make sure we don’t need authorization to get to the login or home page -->
    <http pattern="/login" security="none" />
    <http pattern="/" security="none" />
    <http pattern="/blogPost" security="none" />
    <http pattern="/page" security="none" />
    <http pattern="/archive" security="none" />
    <http pattern="/css/**" security="none" />
    <http pattern="/js/**" security="none" />
    <http pattern="/img/**" security="none" />
    <!-- #3 - Authentication/login form and protected <http auto-config="true" use-expressions="false">
    endpoint configuration -->
    <http auto-config="true" use-expressions="false">
        <!-- #3a - Login via html form, use Spring to do the security check --> <!-- #3b - Use the login page at this endpoint -->
        <!-- #3c - Redirect here if login fails -->
        <!-- controller method to check validity of login info -->
        <form-login login-processing-url="/j_spring_security_check"
                    login-page="/login"
                    authentication-failure-url="/login?login_error=1"/>
        <!-- #3d - Go back to home page when user logs out -->
        <logout logout-success-url="/" />
        <!-- #3e - Access to these endpoints require admin role -->
        <intercept-url pattern="/newPage" access="ROLE_ADMIN" />
        <intercept-url pattern="/users" access="ROLE_ADMIN" />
        <intercept-url pattern="/editPage" access="ROLE_ADMIN" />
        <!-- #3f - Access to all other controller endpoints require user role --> 
        <intercept-url pattern="/editor" access="ROLE_USER" />
        <intercept-url pattern="/newPost" access="ROLE_USER" />
        <intercept-url pattern="/editPost" access="ROLE_USER" />
    </http>
    <!-- #4 - Authentication Manager config --> 
    <authentication-manager>
        <!-- #4a - Authentication Provider - we’re using the JDBC service -->
        <authentication-provider>
            <!-- #4b - Tells Spring Security where to look for user information -->
            <!--       We use the dataSource defined in spring-persistence.xml  -->
            <!--       and we give Spring Security the query to use to lookup   -->
            <!--       the user’s credentials (get the password from the users  -->
            <!-- tables and get the roles from the authorities table) --> 
            <jdbc-user-service id="userService"
                               data-source-ref="dataSource"
                               users-by-username-query="select user_name, user_password, user_enabled from blog_user where user_name=?"
                               authorities-by-username-query="select user_name, authority from authorities where user_name=?" 
            />
        </authentication-provider>
    </authentication-manager>
</beans:beans>